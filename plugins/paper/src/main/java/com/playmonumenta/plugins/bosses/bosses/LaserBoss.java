package com.playmonumenta.plugins.bosses.bosses;

import java.util.Arrays;

import com.playmonumenta.plugins.Plugin;
import com.playmonumenta.plugins.bosses.SpellManager;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.utils.AbilityUtils;
import com.playmonumenta.plugins.utils.BossUtils;

import org.bukkit.Color;
import org.bukkit.Location;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.World;
import org.bukkit.Particle.DustOptions;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

//generalized class for all bosses with laser
public class LaserBoss extends BossAbilityGroup {
	public static final String identityTag = "boss_laser";

	public static class Parameters {
		public int DAMAGE = 0;
		public int DETECTION = 30;
		public int DELAY = 5 * 20;
		public int DURATION = 5 * 20;
		public int COOLDOWN = 12 * 20;
		public boolean CAN_BLOCK = true;
		public boolean SINGLE_TARGET = false;
		public double DAMAGE_PERCENTAGE = 0.0;

		//this effects are given to the player after he receive the damage
		public int FIRE_TICKS = 0;
		public int SILENCE_TICKS = 0;
		public int EFFECT_DURATION = 0;
		public int EFFECT_AMPLIFIER = 0;
		public PotionEffectType EFFECT = PotionEffectType.BLINDNESS;

		//particle & sound used!
		/**Sound used atch tick on each player */
		public Sound SOUND_TICKS = Sound.ENTITY_SHULKER_BULLET_HIT;

		/**Particle used for the laser */
		public Particle PARTICLE_LASER_MAIN = Particle.CRIT;
		/**Particle used for the laser */
		public Particle PARTICLE_LASER_SECOND = Particle.CRIT_MAGIC;

		/**Particle used when the cast is over */
		public Particle PARTICLE_END = Particle.EXPLOSION_NORMAL;
		/**Sound used when the cast is over */
		public Sound SOUND_END = Sound.ENTITY_DRAGON_FIREBALL_EXPLODE;

		/**Color of the particle. If you use this, you should also change some particle to redstone */
		public Color PARTICLE_COLOR = Color.WHITE;
		public int DUST_SIZE = 10;
			//this is used if changed some particle to redstone!
		public int PARTICLE_FREQUENCY = 1;
		public int PARTICLE_CHANCE = 6;
	}

	public static BossAbilityGroup deserialize(Plugin plugin, LivingEntity boss) throws Exception {
		return new LaserBoss(plugin, boss);
	}

	public LaserBoss(Plugin plugin, LivingEntity boss) {
		super(plugin, identityTag, boss);

		final Parameters p = BossUtils.getParameters(boss, identityTag, new Parameters());

		SpellManager activeSpells = new SpellManager(Arrays.asList(
			new SpellBaseLaser(plugin, boss, p.DETECTION, p.DURATION, false, p.SINGLE_TARGET, p.COOLDOWN,
					// Tick action per player
					(Player player, int ticks, boolean blocked) -> {
						player.playSound(player.getLocation(), p.SOUND_TICKS, 0.8f, 0.5f + (ticks / 80f) * 1.5f);
						boss.getLocation().getWorld().playSound(boss.getLocation(), p.SOUND_TICKS, 0.8f, 0.5f + (ticks / 80f) * 1.5f);
						if (ticks == 0) {
							boss.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, p.DURATION, 4, false, true));
						}
					},
					// Particles generated by the laser
					(Location loc) -> {
						World world = loc.getWorld();

						if (p.PARTICLE_LASER_MAIN.equals(Particle.REDSTONE)) {
							world.spawnParticle(Particle.REDSTONE, loc, 1, 0.02, 0.02, 0.02, 0, new DustOptions(p.PARTICLE_COLOR, p.DUST_SIZE));
						} else {
							world.spawnParticle(p.PARTICLE_LASER_MAIN, loc, 1, 0.02, 0.02, 0.02, 0);
						}

						if (p.PARTICLE_LASER_SECOND.equals(Particle.REDSTONE)) {
							world.spawnParticle(Particle.REDSTONE, loc, 1, 0.04, 0.04, 0.04, 1, new DustOptions(p.PARTICLE_COLOR, p.DUST_SIZE));
						} else {
							world.spawnParticle(p.PARTICLE_LASER_SECOND, loc, 1, 0.04, 0.04, 0.04, 1);
						}

					},
					p.PARTICLE_FREQUENCY,
					p.PARTICLE_CHANCE,
					// Damage generated at the end of the attack
					(Player player, Location loc, boolean blocked) -> {

						loc.getWorld().playSound(loc, p.SOUND_END, 0.6f, 1.5f);
						if (p.PARTICLE_END.equals(Particle.REDSTONE)) {
							loc.getWorld().spawnParticle(p.PARTICLE_END, loc, 35, 0, 0, 0, 0.25, new DustOptions(p.PARTICLE_COLOR, p.DUST_SIZE));
						} else {
							loc.getWorld().spawnParticle(p.PARTICLE_END, loc, 35, 0, 0, 0, 0.25);
						}
						if (p.CAN_BLOCK) {
							if (blocked) {
								return;
							}
						}

						if (p.DAMAGE > 0) {
							BossUtils.bossDamage(boss, player, p.DAMAGE);
						}

						if (p.DAMAGE_PERCENTAGE > 0.0) {
							BossUtils.bossDamagePercent(mBoss, player, p.DAMAGE_PERCENTAGE);
						}

						if (p.EFFECT_DURATION > 0) {
							player.addPotionEffect(new PotionEffect(p.EFFECT, p.EFFECT_DURATION, p.EFFECT_AMPLIFIER));
						}

						if (p.FIRE_TICKS > 0) {
							player.setFireTicks(p.FIRE_TICKS);
						}

						if (p.SILENCE_TICKS > 0) {
							AbilityUtils.silencePlayer(player, p.SILENCE_TICKS);
						}


					})
		));

		super.constructBoss(activeSpells, null, p.DETECTION, null, p.DELAY);
	}
}

