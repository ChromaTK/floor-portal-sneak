package com.playmonumenta.plugins.depths.bosses.spells;

import org.bukkit.Color;
import org.bukkit.Location;
import org.bukkit.Particle;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;

import com.playmonumenta.plugins.bosses.parameters.ParticlesList;
import com.playmonumenta.plugins.bosses.parameters.SoundsList;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.depths.bosses.Nucleus;
import com.playmonumenta.plugins.utils.AbilityUtils;
import com.playmonumenta.plugins.utils.BossUtils;

public class SpellTruthSeeker extends SpellBaseLaser {

	public static final int DETECTION = 32;
	public static final int DELAY = 20 * 5;
	public static final int MIN_RANGE = 0;
	public static final int RUN_DISTANCE = 0;
	public static final SoundsList SOUND_TICKS = SoundsList.fromString("[(BLOCK_CONDUIT_ACTIVATE)]");
	private static final Particle.DustOptions LASER_COLOR = new Particle.DustOptions(Color.fromRGB(128, 11, 7), 1.0f);
	public static final ParticlesList PARTICLE_END = ParticlesList.fromString("[(EXPLOSION_NORMAL,35)]");
	public static final SoundsList SOUND_END = SoundsList.fromString("[(ENTITY_DRAGON_FIREBALL_EXPLODE,0.6,1.5)]");
	public static final double VELOCITY_MULTIPLIER = 0.5;
	public static final double DAMAGE_RADIUS = 3;
	public static final double DAMAGE_PERCENTAGE = 0.6;
	public static final int DURATION = 40;

	public Plugin mPlugin;
	public Nucleus mBossReference;
	public int mCooldownTicks;

	public SpellTruthSeeker(Plugin plugin, LivingEntity launcher, int cooldown, Nucleus bossReference) {
		super(plugin, launcher, DETECTION, DURATION * 2, false, false, cooldown,
				// Tick action per player
				(Player player, int ticks, boolean blocked) -> {

					SOUND_TICKS.play(player, 0.8f, 0.5f + (ticks / 80f) * 1.5f);
					SOUND_TICKS.play(launcher.getLocation(), 0.8f, 0.5f + (ticks / 80f) * 1.5f);
				},
				// Particles generated by the laser
				(Location loc) -> {
					loc.getWorld().spawnParticle(Particle.REDSTONE, loc, 3, 0.03, 0.03, 0.03, LASER_COLOR);
				},
				1,
				6,
				// Damage generated at the end of the attack
				(Player player, Location loc, boolean blocked) -> {
					SOUND_END.play(loc, 0.6f, 1.5f);
					PARTICLE_END.spawn(loc, 0, 0, 0, 0.25);

					BossUtils.bossDamagePercent(launcher, player, DAMAGE_PERCENTAGE);
					AbilityUtils.silencePlayer(player, DURATION);
				});

		mPlugin = plugin;
		mBossReference = bossReference;
		mCooldownTicks = cooldown;
	}

	@Override
	public int cooldownTicks() {
		return mCooldownTicks;
	}

	@Override
	public boolean canRun() {
		return !mBossReference.mIsHidden;
	}

}
