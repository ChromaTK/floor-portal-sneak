package com.playmonumenta.plugins.bosses.bosses;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.attribute.Attribute;
import org.bukkit.boss.BarColor;
import org.bukkit.boss.BarStyle;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import com.playmonumenta.plugins.bosses.BossBarManager;
import com.playmonumenta.plugins.bosses.BossBarManager.BossHealthAction;
import com.playmonumenta.plugins.bosses.SpellManager;
import com.playmonumenta.plugins.bosses.spells.Spell;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.bosses.spells.SpellBlockBreak;
import com.playmonumenta.plugins.bosses.spells.SpellChangeFloor;
import com.playmonumenta.plugins.bosses.spells.SpellConditionalTeleport;
import com.playmonumenta.plugins.bosses.spells.SpellFireball;
import com.playmonumenta.plugins.bosses.spells.SpellKnockAway;
import com.playmonumenta.plugins.bosses.spells.SpellMinionResist;
import com.playmonumenta.plugins.integrations.LibraryOfSoulsIntegration;
import com.playmonumenta.plugins.utils.BossUtils;
import com.playmonumenta.plugins.utils.EntityUtils;
import com.playmonumenta.plugins.utils.FastUtils;
import com.playmonumenta.plugins.utils.PlayerUtils;
import com.playmonumenta.plugins.utils.SerializationUtils;

public final class Azacor extends BossAbilityGroup {
	public static final String identityTag = "boss_azacor";
	public static final int detectionRange = 50;

	private final Location mSpawnLoc;
	private final Location mEndLoc;

	public static BossAbilityGroup deserialize(Plugin plugin, LivingEntity boss) throws Exception {
		return SerializationUtils.statefulBossDeserializer(boss, identityTag, (spawnLoc, endLoc) -> {
			return new Azacor(plugin, boss, spawnLoc, endLoc);
		});
	}

	@Override
	public String serialize() {
		return SerializationUtils.statefulBossSerializer(mSpawnLoc, mEndLoc);
	}

	public Azacor(Plugin plugin, LivingEntity boss, Location spawnLoc, Location endLoc) {
		super(plugin, identityTag, boss);
		mSpawnLoc = spawnLoc;
		mEndLoc = endLoc;

		mBoss.setRemoveWhenFarAway(false);
		mBoss.addScoreboardTag("Boss");

		SpellManager activeSpells = new SpellManager(Arrays.asList(
			new SpellChangeFloor(plugin, mBoss, spawnLoc, 24, 3, Material.LAVA, 400),
			new SpellFireball(plugin, boss, detectionRange, 40, 1, 160, 2.0f, true, false,
			                  // Launch effect
			                  (Location loc) -> {
			                      loc.getWorld().playSound(loc, Sound.ENTITY_GHAST_SHOOT, SoundCategory.HOSTILE, 1.0f, 1.0f);
			                      loc.getWorld().spawnParticle(Particle.VILLAGER_ANGRY, loc, 10, 0.4, 0.4, 0.4, 0);
			                  }),
			new SpellBaseLaser(plugin, boss, detectionRange, 100, false, false, 160,
			                   // Tick action per player
			                   (LivingEntity target, int ticks, boolean blocked) -> {
								   if (ticks % 8 == 0) {
										target.getWorld().playSound(target.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 0.75f, 0.5f + (ticks / 80f) * 1.5f);
								   } else if (ticks % 8 == 2) {
									   boss.getLocation().getWorld().playSound(boss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 1.0f, 0.5f + (ticks / 80f) * 1.5f);
								   } else if (ticks % 8 == 4) {
										target.getWorld().playSound(target.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 0.75f, 0.5f + (ticks / 100f) * 1.5f);
								   } else if (ticks % 8 == 6) {
									   boss.getLocation().getWorld().playSound(boss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 1.0f, 0.5f + (ticks / 100f) * 1.5f);
								   }
			                       if (ticks == 0) {
			                           boss.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, 110, 4));
			                       }
			                   },
			                   // Particles generated by the laser
			                   (Location loc) -> {
			                       loc.getWorld().spawnParticle(Particle.SMOKE_LARGE, loc, 1, 0.02, 0.02, 0.02, 0);
			                       loc.getWorld().spawnParticle(Particle.FLAME, loc, 1, 0.02, 0.02, 0.02, 0);
			                   },
			                   // Damage generated at the end of the attack
			                   (LivingEntity target, Location loc, boolean blocked) -> {
			                       loc.getWorld().playSound(loc, Sound.ENTITY_DRAGON_FIREBALL_EXPLODE, SoundCategory.HOSTILE, 1f, 1.5f);
			                       loc.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, loc, 30, 0, 0, 0, 0.3);
			                       if (!blocked) {
									   BossUtils.bossDamagePercent(mBoss, target, 0.75, mBoss.getLocation());
									   if (target instanceof Player player && BossUtils.bossDamageBlocked(player, mBoss.getLocation())) {
										   BossUtils.bossDamagePercent(mBoss, target, 0.25);
									   }
									   target.addPotionEffect(new PotionEffect(PotionEffectType.WITHER, 100, 2));
			                       } else {
									   EntityUtils.summonEntityAt(loc, EntityType.PRIMED_TNT, "{Fuse:0}");
			                       }
			                   }),
			new SpellKnockAway(plugin, boss, 5, 20, 1.5f)
		));
		List<Spell> passiveSpells = Arrays.asList(
			new SpellBlockBreak(mBoss),
			// Teleport the boss to spawnLoc if he gets too far away from where he spawned
			new SpellConditionalTeleport(mBoss, spawnLoc, b -> spawnLoc.distance(b.getLocation()) > 80),
			// Teleport the boss to spawnLoc if he is stuck in bedrock
			new SpellConditionalTeleport(mBoss, spawnLoc, b -> b.getLocation().getBlock().getType() == Material.BEDROCK ||
			                                                   b.getLocation().add(0, 1, 0).getBlock().getType() == Material.BEDROCK ||
			                                                   b.getLocation().getBlock().getType() == Material.LAVA),
			new SpellMinionResist(mBoss, new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 30, 2), detectionRange, 5,
				(entity) -> (entity.getType().equals(EntityType.WITHER_SKELETON) || entity.getType().equals(EntityType.SKELETON)) && entity.getScoreboardTags().contains("azacor_minion"))
		);

		Map<Integer, BossHealthAction> events = new HashMap<Integer, BossHealthAction>();
		int playerCount = BossUtils.getPlayersInRangeForHealthScaling(mSpawnLoc, detectionRange);
		events.put(100, (mBoss) -> {
			randomMinion("tellraw @s [\"\",{\"text\":\"I took his offer and I remain here. Even assassins cannot make me face death! What makes you think you can fare better?\",\"color\":\"dark_red\"}]");
			if (playerCount >= 3) {
				randomMinion("");
			}
		});
		events.put(75, (mBoss) -> {
			randomMinion("tellraw @s [\"\",{\"text\":\"I will bask in their screams!\",\"color\":\"dark_red\"}]");
			if (playerCount >= 3) {
				randomMinion("");
			}
		});
		events.put(50, (mBoss) -> {
			randomMinion("tellraw @s [\"\",{\"text\":\"Foolish mortals! Your efforts mean nothing. You cannot stop me. You will fall, just like the rest.\",\"color\":\"dark_red\"}]");
			if (playerCount >= 3) {
				randomMinion("");
			}
		});
		events.put(25, (mBoss) -> {
			randomMinion("tellraw @s [\"\",{\"text\":\"I wield powers beyond your comprehension. I will not be defeated by insects like you!\",\"color\":\"dark_red\"}]");
			if (playerCount >= 3) {
				randomMinion("");
			}
		});
		BossBarManager bossBar = new BossBarManager(plugin, boss, detectionRange, BarColor.RED, BarStyle.SEGMENTED_10, events);

		super.constructBoss(activeSpells, passiveSpells, detectionRange, bossBar);
	}

	private void randomMinion(String tellraw) {
		randomMinion(tellraw, mSpawnLoc, (100.0 + BossUtils.getPlayersInRangeForHealthScaling(mSpawnLoc, detectionRange) * 75.0) * 1.1);
	}

	protected static void randomMinion(String tellraw, Location loc, double eliteHealth) {
		int rand = FastUtils.RANDOM.nextInt(4);
		if (rand == 0) {
			LivingEntity elite = (LivingEntity) LibraryOfSoulsIntegration.summon(loc, "SarintultheUnseen");
			EntityUtils.setAttributeBase(elite, Attribute.GENERIC_MAX_HEALTH, eliteHealth);
			elite.setHealth(eliteHealth);
		} else if (rand == 1) {
			LivingEntity elite = (LivingEntity) LibraryOfSoulsIntegration.summon(loc, "ZirinkelthePrecise");
			EntityUtils.setAttributeBase(elite, Attribute.GENERIC_MAX_HEALTH, eliteHealth);
			elite.setHealth(eliteHealth);
		} else if (rand == 2) {
			LivingEntity elite = (LivingEntity) LibraryOfSoulsIntegration.summon(loc, "KazarthuntheMighty");
			EntityUtils.setAttributeBase(elite, Attribute.GENERIC_MAX_HEALTH, 1.5 * eliteHealth);
			elite.setHealth(1.5 * eliteHealth);
		} else {
			LivingEntity elite = (LivingEntity) LibraryOfSoulsIntegration.summon(loc, "VerkantaltheCunning");
			EntityUtils.setAttributeBase(elite, Attribute.GENERIC_MAX_HEALTH, 0.75 * eliteHealth);
			elite.setHealth(0.75 * eliteHealth);
		}
		if (tellraw != null && !tellraw.isEmpty()) {
			PlayerUtils.executeCommandOnNearbyPlayers(loc, detectionRange, tellraw);
		}
	}

	@Override
	public void init() {
		int bossTargetHp = 0;
		int playerCount = BossUtils.getPlayersInRangeForHealthScaling(mBoss, detectionRange);
		int hpDelta = 1024;
		while (playerCount > 0) {
			bossTargetHp = bossTargetHp + hpDelta;
			hpDelta = hpDelta / 2;
			playerCount--;
		}
		EntityUtils.setAttributeBase(mBoss, Attribute.GENERIC_MAX_HEALTH, bossTargetHp * 1.1);
		mBoss.setHealth(bossTargetHp * 1.1);

		//launch event related spawn commands
		PlayerUtils.executeCommandOnNearbyPlayers(mSpawnLoc, detectionRange, "effect give @s minecraft:blindness 2 2");
		PlayerUtils.executeCommandOnNearbyPlayers(mSpawnLoc, detectionRange, "title @s title [\"\",{\"text\":\"Azacor\",\"color\":\"dark_gray\",\"bold\":true}]");
		PlayerUtils.executeCommandOnNearbyPlayers(mSpawnLoc, detectionRange, "title @s subtitle [\"\",{\"text\":\"The Dark Summoner\",\"color\":\"gray\",\"bold\":true}]");
		PlayerUtils.executeCommandOnNearbyPlayers(mSpawnLoc, detectionRange, "playsound minecraft:entity.wither.spawn master @s ~ ~ ~ 10 0.7");
	}



	@Override
	public void death(EntityDeathEvent event) {
		PlayerUtils.executeCommandOnNearbyPlayers(mSpawnLoc, detectionRange, "playsound minecraft:entity.enderdragon.death master @s ~ ~ ~ 100 0.8");
		PlayerUtils.executeCommandOnNearbyPlayers(mSpawnLoc, detectionRange, "tellraw @s [\"\",{\"text\":\"No... it's not possible... I was promised...\",\"color\":\"dark_red\"}]");
		for (Player player : PlayerUtils.playersInRange(mSpawnLoc, detectionRange, true)) {
			player.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION, 20 * 10, 2));
			player.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 20 * 10, 2));
		}
		mEndLoc.getBlock().setType(Material.REDSTONE_BLOCK);
	}
}
